---
swagger: "2.0"
info:
  version: "3.0"
  title: CET-Lite for CoinEx Chain
  description: A REST interface for state queries, transaction generation and broadcasting.
tags:
  - name: Transactions
    description: Search, encode, or broadcast transactions.
  - name: Tendermint
    description: Tendermint APIs, such as query blocks, transactions and validatorset
  - name: Auth
    description: Authenticate accounts
  - name: Bank
    description: Create and broadcast transactions
  - name: Staking
    description: Stake module APIs
  - name: Governance
    description: Governance module APIs
  - name: Slashing
    description: Slashing module APIs
  - name: Distribution
    description: Fee distribution module APIs
  - name: Supply
    description: Supply module APIs
  - name: version
  - name: Misc
    description: Query app version
  - name: Asset
    description: Asset module APIs
  - name: Market
    description: Market module APIs
  - name: Comment
    description: Post comments about tokens
  - name: Alias
    description: Add and remove aliases for accounts
schemes:
  - https
  - http
host: dex-api.coinex.org
securityDefinitions:
  kms:
    type: basic
paths:
  /version:
    get:
      operationId: getVersion
      summary: Version of CET-lite
      tags:
        - Misc
      description: Get the version of cetcli
      responses:
        200:
          description: Plaintext version i.e. "v0.25.0"
  /node_version:
    get:
      operationId: getNodeVersion
      summary: Version of the connected node
      tags:
        - Misc
      description: Get the version of the SDK running on the connected node to compare against expected
      responses:
        200:
          description: Plaintext version i.e. "v0.25.0"
        500:
          description: failed to query node version
  /node_info:
    get:
      description: Information about the connected node
      summary: The properties of the connected node
      operationId: getNodeInfo
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: Node status
          schema:
            type: object
            properties:
              id:
                type: string
              moniker:
                type: string
                example: validator-name
              protocol_version:
                properties:
                  p2p:
                    type: string
                    example: 7
                  block:
                    type: string
                    example: 10
                  app:
                    type: string
                    example: 0
              network:
                type: string
                example: coinexchain-2
              channels:
                type: string
              listen_addr:
                type: string
                example: 192.168.56.1:26656
              version:
                description: Tendermint version
                type: string
                example: 0.15.0
              other:
                description: more information on versions
                type: object
                properties:
                  tx_index:
                    type: string
                    example: on
                  rpc_address:
                    type: string
                    example: tcp://0.0.0.0:26657
        500:
          description: Failed to query node status
  /syncing:
    get:
      operationId: getSyncing
      summary: Syncing state of node
      tags:
        - Tendermint
      description: Get if the node is currently syning with other nodes
      responses:
        200:
          description: '"true" or "false"'
        500:
          description: Server internal error
  /blocks/latest:
    get:
      summary: Get the latest block
      operationId: getLatestBlock
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: The latest block
          schema:
            $ref: "#/definitions/BlockQuery"
        500:
          description: Server internal error
  /blocks/{height}:
    get:
      operationId: getBlock
      summary: Get a block at a certain height
      tags:
        - Tendermint
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        200:
          description: The block at a specific height
          schema:
            $ref: "#/definitions/BlockQuery"
        404:
          description: Request block height doesn't
        400:
          description: Invalid height
        500:
          description: Server internal error
  /validatorsets/latest:
    get:
      summary: Get the latest validator set
      operationId: getLatestValidatorSet
      tags:
        - Tendermint
      produces:
        - application/json
      responses:
        200:
          description: The validator set at the latest block height
          schema:
            type: object
            properties:
              block_height:
                type: string
              validators:
                type: array
                items:
                  $ref: "#/definitions/TendermintValidator"
        500:
          description: Server internal error
  /validatorsets/{height}:
    get:
      operationId: getValidatorSet
      summary: Get a validator set a certain height
      tags:
        - Tendermint
      produces:
        - application/json
      parameters:
        - in: path
          name: height
          description: Block height
          required: true
          type: number
          x-example: 1
      responses:
        200:
          description: The validator set at a specific block height
          schema:
            type: object
            properties:
              block_height:
                type: string
              validators:
                type: array
                items:
                  $ref: "#/definitions/TendermintValidator"
        404:
          description: Block at height not available
        400:
          description: Invalid height
        500:
          description: Server internal error
  /txs/{hash}:
    get:
      summary: Get a Tx by hash
      operationId: getTxByHash
      tags:
        - Transactions
      produces:
        - application/json
      parameters:
        - in: path
          name: hash
          description: Tx hash
          required: true
          type: string
          x-example: BCBE20E8D46758B96AE5883B792858296AC06E51435490FBDCAE25A72B3CC76B
      responses:
        200:
          description: Tx with the provided hash
          schema:
            $ref: "#/definitions/TxQuery"
        404:
          description: Tx not found
        500:
          description: Internal Server Error
  /txs:
    get:
      operationId: searchTx
      tags:
        - Transactions
      summary: Search transactions
      description: Search transactions by events.
      produces:
        - application/json
      parameters:
        - in: query
          name: message.action
          type: string
          description: "transaction events such as 'message.action=send' which results in the following endpoint: 'GET /txs?message.action=send'"
          x-example: "send"
        - in: query
          name: message.sender
          type: string
          description: "transaction tags with sender: 'GET /txs?message.action=send&message.sender=cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv'"
          x-example: "cosmos16xyempempp92x9hyzz9wrgf94r6j9h5f06pxxv"
        - in: query
          name: page
          description: Page number
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          x-example: 1
      responses:
        200:
          description: All txs matching the provided events
          schema:
            $ref: "#/definitions/PaginatedQueryTxs"
        400:
          description: Invalid search events
        500:
          description: Internal Server Error
    post:
      tags:
        - Transactions
      summary: Broadcast a signed tx
      description: Broadcast a signed tx to a full node
      operationId: broadcastTx
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: txBroadcast
          description: The tx must be a signed StdTx. The supported broadcast modes include `"block"`(return after tx commit), `"sync"`(return afer CheckTx) and `"async"`(return right away).
          required: true
          schema:
            type: object
            properties:
              tx:
                $ref: "#/definitions/StdTx"
              mode:
                type: string
                example: block
      responses:
        200:
          description: Tx broadcasting result
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        500:
          description: Internal Server Error
  /txs/encode:
    post:
      tags:
        - Transactions
      summary: Encode a transaction to the Amino wire format
      description: Encode a transaction (signed or not) from JSON to base64-encoded Amino serialized bytes
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tx
          description: The tx to encode
          required: true
          schema:
            type: object
            properties:
              tx:
                $ref: "#/definitions/StdTx"
      responses:
        200:
          description: The tx was successfully decoded and re-encoded
          schema:
            type: object
            properties:
              tx:
                type: string
                example: The base64-encoded Amino-serialized bytes for the tx
        400:
          description: The tx was malformated
        500:
          description: Server internal error
  /bank/balances/{address}:
    get:
      summary: Get the account balances
      operationId: getAddressBalances
      tags:
        - Bank
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: coinex16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
      responses:
        200:
          description: Account balances
          schema:
            type: object
            properties:
              coins:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              locked_coins:
                type: array
                items:
                  $ref: "#/definitions/LockedCoin"
                x-nullable: true
        204:
          description: There is no data for the requested account
        500:
          description: Server internal error
  /bank/accounts/{address}/transfers:
    post:
      summary: Send coins from one account to another
      operationId: sendCoins
      tags:
        - Bank
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address in bech32 format
          required: true
          type: string
          x-example: coinex16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
        - in: body
          name: account
          description: The sender and tx information
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              amount:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              unlock_time:
                type: string
                example: "675132000"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /bank/accounts/memo:
    post:
      summary: Mark if memo is required to receive coins
      operationId: setMemoRequired
      tags:
        - Bank
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: account
          description: The mark
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              memo_required:
                type: boolean
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /auth/accounts/{address}:
    get:
      summary: Get the account information on blockchain
      operationId: getAccount
      tags:
        - Auth
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: Account address
          required: true
          type: string
          x-example: coinex16gdxm24ht2mxtpz9cma6tr6a6d47x63hlq4pxt
      responses:
        200:
          description: Account information on the blockchain
          schema:
            type: object
            properties:
              address:
                type: string
              coins:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              locked_coins:
                type: array
                items:
                  $ref: "#/definitions/LockedCoin"
                x-nullable: true
              frozen_coins:
                type: array
                items:
                  $ref: "#/definitions/Coin"
                x-nullable: true
              public_key:
                $ref: "#/definitions/PublicKey"
              account_number:
                type: string
              sequence:
                type: string
              memo_required:
                type: boolean
        204:
          description: No content about this account address
        500:
          description: Server internel error
  /staking/delegators/{delegatorAddr}/delegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get all delegations from a delegator
      operationId: getDelegations
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Delegation"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Submit delegation
      operationId: submitDelegation
      parameters:
        - in: body
          name: delegation
          description: submit delegation to provided validator
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_address:
                $ref: "#/definitions/ValidatorAddress"
              amount:
                $ref: "#/definitions/Coin"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or delegation request body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/delegations/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      operationId: getDelegationsToValidator
      summary: Query the current delegation between a delegator and a validator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Delegation"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/unbonding_delegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get all unbonding delegations from a delegator
      operationId: getUndelegationsOfDelegator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnbondingDelegationPair"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Submit an unbonding delegation
      operationId: undelegate
      parameters:
        - in: body
          name: delegation
          description: The password of the account to remove from the KMS
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_address:
                $ref: "#/definitions/ValidatorAddress"
              amount:
                $ref: "#/definitions/Coin"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or unbonding delegation request body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/unbonding_delegations/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query all unbonding delegations between a delegator and a validator
      operationId: getUndelegationsBetween
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/UnbondingDelegationPair"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/redelegations:
    parameters:
      - in: query
        name: delegator
        description: Bech32 AccAddress of Delegator
        required: false
        type: string
      - in: query
        name: validator_from
        description: Bech32 ValAddress of SrcValidator
        required: false
        type: string
      - in: query
        name: validator_to
        description: Bech32 ValAddress of DstValidator
        required: false
        type: string
    get:
      summary: Get all redelegations (filter by query params)
      operationId: getRedelegations
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Redelegation"
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/redelegations:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    post:
      summary: Submit a redelegation
      operationId: submitRedelegation
      parameters:
        - in: body
          name: delegation
          description: The sender and tx information
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              delegator_address:
                $ref: "#/definitions/Address"
              validator_src_address:
                $ref: "#/definitions/ValidatorAddress"
              validator_dst_address:
                $ref: "#/definitions/ValidatorAddress"
              amount:
                $ref: "#/definitions/Coin"
      tags:
        - Staking
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid delegator address or redelegation request body
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/validators:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      operationId: getValidatorsOfDelegator
      summary: Query all validators that a delegator is bonded to
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Validator"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/validators/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 ValAddress of Delegator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      operationId: getValidatorOfDelegator
      summary: Query a validator that a delegator is bonded to
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid delegator address or validator address
        500:
          description: Internal Server Error
  /staking/delegators/{delegatorAddr}/txs:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      operationId: getDelegatorTxs
      summary: Get all staking txs (i.e msgs) from a delegator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/TxQuery"
        204:
          description: No staking transaction about this delegator address
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
  /staking/validators:
    get:
      summary: Get all validator candidates. By default it returns only the bonded validators.
      operationId: getValidators
      parameters:
        - in: query
          name: status
          type: string
          description: The validator bond status. Must be either 'bonded', 'unbonded', or 'unbonding'.
          x-example: bonded
        - in: query
          name: page
          description: The page number.
          type: integer
          x-example: 1
        - in: query
          name: limit
          description: The maximum number of items per page.
          type: integer
          x-example: 1
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Validator"
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Query the information from a single validator
      operationId: getValidator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Validator"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}/delegations:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Get all delegations from a validator
      operationId: getDelegationsOfValidator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Delegation"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/validators/{validatorAddr}/unbonding_delegations:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Get all unbonding delegations from a validator
      operationId: getUndelegationsOfValidator
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/UnbondingDelegationPair"
            x-nullable: true
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /staking/pool:
    get:
      summary: Get the current state of the staking pool
      operationId: getStakingPool
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              not_bonded_tokens:
                type: string
              bonded_tokens:
                type: string
              non_bondable_tokens:
                type: string
              total_supply:
                type: string
              bonded_ratio:
                type: string
        500:
          description: Internal Server Error
  /staking/parameters:
    get:
      summary: Get the current staking parameter values
      operationId: getStakingParameters
      tags:
        - Staking
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              inflation_rate_change:
                type: string
              inflation_max:
                type: string
              inflation_min:
                type: string
              goal_bonded:
                type: string
              unbonding_time:
                type: string
              max_validators:
                type: integer
              bond_denom:
                type: string
        500:
          description: Internal Server Error
  /slashing/validators/{validatorPubKey}/signing_info:
    get:
      operationId: getSigningInfo
      summary: Get sign info of given validator
      description: Get sign info of given validator
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - type: string
          description: Bech32 validator public key
          name: validatorPubKey
          required: true
          in: path
          x-example: coinexvalconspub1zcjduepq7mft6gfls57a0a42d7uhx656cckhfvtrlmw744jv4q0mvlv0dypskehfk8
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/SigningInfo"
        204:
          description: No sign info of this validator
        400:
          description: Invalid validator public key
        500:
          description: Internal Server Error
  /slashing/signing_infos:
    get:
      operationId: getSigningInfos
      summary: Get sign info of given all validators
      description: Get sign info of all validators
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - in: query
          name: page
          description: Page number
          type: integer
          required: true
          x-example: 1
        - in: query
          name: limit
          description: Maximum number of items per page
          type: integer
          required: true
          x-example: 5
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/SigningInfo"
        400:
          description: Invalid validator public key for one of the validators
        500:
          description: Internal Server Error
  /slashing/validators/{validatorAddr}/unjail:
    post:
      summary: Unjail a jailed validator
      description: Send transaction to unjail a jailed validator
      operationId: unjailValidator
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Slashing
      parameters:
        - type: string
          description: Bech32 validator address
          name: validatorAddr
          required: true
          in: path
          x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
        - description: ""
          name: UnjailBody
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/StdTx"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid validator address or base_req
        500:
          description: Internal Server Error
  /slashing/parameters:
    get:
      operationId: getSlashingParams
      summary: Get the current slashing parameters
      tags:
        - Slashing
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              max_evidence_age:
                type: string
              signed_blocks_window:
                type: string
              min_signed_per_window:
                type: string
              double_sign_unbond_duration:
                type: string
              downtime_unbond_duration:
                type: string
              slash_fraction_double_sign:
                type: string
              slash_fraction_downtime:
                type: string
        500:
          description: Internal Server Error
  /gov/proposals:
    post:
      summary: Submit a proposal
      description: Send transaction to submit a proposal
      operationId: submitProposal
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - description: valid value of `"proposal_type"` can be `"text"`, `"parameter_change"`, `"software_upgrade"`
          name: post_proposal_body
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              title:
                type: string
              description:
                type: string
              proposal_type:
                type: string
                example: "text"
              proposer:
                $ref: "#/definitions/Address"
              initial_deposit:
                type: array
                items:
                  $ref: "#/definitions/Coin"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid proposal body
        500:
          description: Internal Server Error
    get:
      summary: Query proposals
      description: Query proposals information with parameters
      operationId: getProposals
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - in: query
          name: voter
          description: voter address
          required: false
          type: string
        - in: query
          name: depositor
          description: depositor address
          required: false
          type: string
        - in: query
          name: status
          description: proposal status, valid values can be `"deposit_period"`, `"voting_period"`, `"passed"`, `"rejected"`
          required: false
          type: string
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/TextProposal"
        400:
          description: Invalid query parameters
        500:
          description: Internal Server Error
  /gov/proposals/param_change:
    post:
      summary: Generate a parameter change proposal transaction
      description: Generate a parameter change proposal transaction
      operationId: submitParameterChangeProposal
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - description: The parameter change proposal body that contains all parameter changes
          name: post_proposal_body
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              title:
                type: string
                x-example: "Param Change"
              description:
                type: string
                x-example: "Update max validators"
              proposer:
                $ref: "#/definitions/Address"
              deposit:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              changes:
                type: array
                items:
                  $ref: "#/definitions/ParamChange"
      responses:
        200:
          description: The transaction was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid proposal body
        500:
          description: Internal Server Error
  /gov/proposals/community_pool_spend:
    post:
      summary: Generate a community pool spend proposal transaction
      description: Generate a community pool spend proposal transaction
      operationId: submitCommunityPoolSpendProposal
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - description: The community pool spend proposal body contains coin amount to be spent
          name: post_proposal_body
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              title:
                type: string
                x-example: "Community Pool Spend"
              description:
                type: string
                x-example: "Pay me some coins"
              proposer:
                $ref: "#/definitions/Address"
              recipient:
                $ref: "#/definitions/Address"
              deposit:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              amount:
                type: array
                items:
                  $ref: "#/definitions/Coin"
      responses:
        200:
          description: The transaction was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid proposal body
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}:
    get:
      summary: Query a proposal
      description: Query a proposal by id
      operationId: getProposalByID
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          name: proposalId
          required: true
          in: path
          x-example: '1'
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TextProposal"
        400:
          description: Invalid proposal id
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/proposer:
    get:
      summary: Query proposer
      description: Query for the proposer for a proposal
      operationId: getProposer
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          name: proposalId
          required: true
          in: path
          x-example: "2"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Proposer"
        400:
          description: Invalid proposal ID
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/deposits:
    get:
      summary: Query deposits
      description: Query deposits by proposalId
      operationId: getDeposits
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          name: proposalId
          required: true
          in: path
          x-example: "2"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Deposit"
        400:
          description: Invalid proposal id
        500:
          description: Internal Server Error
    post:
      summary: Deposit tokens to a proposal
      description: Send transaction to deposit tokens to a proposal
      operationId: depositToProposal
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
        - description: ""
          name: post_deposit_body
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              depositor:
                $ref: "#/definitions/Address"
              amount:
                type: array
                items:
                  $ref: "#/definitions/Coin"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid proposal id or deposit body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/deposits/{depositor}:
    get:
      summary: Query deposit
      description: Query deposit by proposalId and depositor address
      operationId: getDepositByAddr
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
        - type: string
          description: Bech32 depositor address
          name: depositor
          required: true
          in: path
          x-example: coinex1xl6453f6q6dv5770c9ue6hspdc0vxfuqtudkhz
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Deposit"
        400:
          description: Invalid proposal id or depositor address
        404:
          description: Found no deposit
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/votes:
    get:
      summary: Query voters
      description: Query voters information by proposalId
      operationId: getVoters
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Vote"
        400:
          description: Invalid proposal id
        500:
          description: Internal Server Error
    post:
      summary: Vote a proposal
      description: Send transaction to vote a proposal
      operationId: voteProposal
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
        - description: valid value of `"option"` field can be `"yes"`, `"no"`, `"no_with_veto"` and `"abstain"`
          name: post_vote_body
          in: body
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              voter:
                $ref: "#/definitions/Address"
              option:
                type: string
                example: "yes"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid proposal id or vote body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/votes/{voter}:
    get:
      summary: Query vote
      description: Query vote information by proposal Id and voter address
      operationId: getVoterByAddr
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
        - type: string
          description: Bech32 voter address
          name: voter
          required: true
          in: path
          x-example: coinex1qwl879nx9t6kef4supyazayf7vjhennyjqwjgr
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Vote"
        400:
          description: Invalid proposal id or voter address
        404:
          description: Found no vote
        500:
          description: Internal Server Error
  /gov/proposals/{proposalId}/tally:
    get:
      summary: Get a proposal's tally result at the current time
      description: Gets a proposal's tally result at the current time. If the proposal is pending deposits (i.e status 'DepositPeriod') it returns an empty tally result.
      operationId: getTally
      produces:
        - application/json
      tags:
        - Governance
      parameters:
        - type: string
          description: proposal id
          name: proposalId
          required: true
          in: path
          x-example: "2"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/TallyResult"
        400:
          description: Invalid proposal id
        500:
          description: Internal Server Error
  /gov/parameters/deposit:
    get:
      summary: Query governance deposit parameters
      description: Query governance deposit parameters. The max_deposit_period units are in nanoseconds.
      operationId: getDepositParameters
      produces:
        - application/json
      tags:
        - Governance
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              min_deposit:
                type: array
                items:
                  $ref: "#/definitions/Coin"
              max_deposit_period:
                type: string
                example: "86400000000000"
        400:
          description: <other_path> is not a valid query request path
        404:
          description: Found no deposit parameters
        500:
          description: Internal Server Error
  /gov/parameters/tallying:
    get:
      summary: Query governance tally parameters
      description: Query governance tally parameters
      operationId: getTallyingParameters
      produces:
        - application/json
      tags:
        - Governance
      responses:
        200:
          description: OK
          schema:
            properties:
              threshold:
                type: string
                example: "0.5000000000"
              veto:
                type: string
                example: "0.3340000000"
              governance_penalty:
                type: string
                example: "0.0100000000"
        400:
          description: <other_path> is not a valid query request path
        404:
          description: Found no tally parameters
        500:
          description: Internal Server Error
  /gov/parameters/voting:
    get:
      summary: Query governance voting parameters
      description: Query governance voting parameters. The voting_period units are in nanoseconds.
      operationId: getVotingParameters
      produces:
        - application/json
      tags:
        - Governance
      responses:
        200:
          description: OK
          schema:
            properties:
              voting_period:
                type: string
                example: "86400000000000"
        400:
          description: <other_path> is not a valid query request path
        404:
          description: Found no voting parameters
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/rewards:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      summary: Get the total rewards balance from all delegations
      description: Get the sum of all the rewards earned by delegations by a single delegator
      operationId: getAllRewards
      produces:
        - application/json
      tags:
        - Distribution
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/DelegatorTotalRewards"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Withdraw all the delegator's delegation rewards
      description: Withdraw all the delegator's delegation rewards
      operationId: withdrawAllRewards
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/rewards/{validatorAddr}:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      operationId: getRewardByValidator
      summary: Query a delegation reward
      description: Query a single delegation reward by a delegator
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      summary: Withdraw a delegation reward
      description: Withdraw a delegator's delegation reward from a single validator
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator address or delegation body
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/delegators/{delegatorAddr}/withdraw_address:
    parameters:
      - in: path
        name: delegatorAddr
        description: Bech32 AccAddress of Delegator
        required: true
        type: string
        x-example: coinex167w96tdvmazakdwkw2u57227eduula2cy572lf
    get:
      operationId: getWithdrawAddress
      summary: Get the rewards withdrawal address
      description: Get the delegations' rewards withdrawal address. This is the address in which the user will receive the reward funds
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Address"
        400:
          description: Invalid delegator address
        500:
          description: Internal Server Error
    post:
      operationId: setWithdrawAddress
      summary: Replace the rewards withdrawal address
      description: Replace the delegations' rewards withdrawal address for a new one.
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              withdraw_address:
                $ref: "#/definitions/Address"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid delegator or withdraw address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      operationId: getDistributionInfo
      summary: Validator distribution information
      description: Query the distribution information of a single validator
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/ValidatorDistInfo"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}/outstanding_rewards:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      summary: Fee distribution outstanding rewards of a single validator
      operationId: getOutstandingRewards
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /distribution/validators/{validatorAddr}/rewards:
    parameters:
      - in: path
        name: validatorAddr
        description: Bech32 OperatorAddress of validator
        required: true
        type: string
        x-example: coinexvaloper1qwl879nx9t6kef4supyazayf7vjhennyh568ys
    get:
      operationId: getValidatorRewards
      summary: Commission and self-delegation rewards of a single validator
      description: Query the commission and self-delegation rewards of validator.
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        400:
          description: Invalid validator address
        500:
          description: Internal Server Error
    post:
      operationId: withdrawAllValidatorRewards
      summary: Withdraw the validator's rewards
      description: Withdraw the validator's self-delegation and commissions rewards
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Withdraw request body
          schema:
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/BroadcastTxCommitResult"
        400:
          description: Invalid validator address
        401:
          description: Key password is wrong
        500:
          description: Internal Server Error
  /distribution/{accAddress}/donates:
    post:
      summary: Donate to the community pool
      description: Donate some amount of cet to the community pool
      operationId: donateToCommunityPool
      tags:
        - Distribution
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: accAddress
          description: Account address of the user
          required: true
          type: string
          x-example: coinex1628t2zxa9antj3qtkg7xj2m4t68uljqvyjqrup
        - in: body
          name: amount
          description: Amount of cet to donate
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              amount:
                type: array
                items:
                  $ref: "#/definitions/Coin"
      responses:
        200:
          description: Donate tx result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /distribution/community_pool:
    get:
      summary: Community pool parameters
      operationId: getCommunityPool
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Coin"
        500:
          description: Internal Server Error
  /distribution/parameters:
    get:
      operationId: getDistributionParams
      summary: Fee distribution parameters
      tags:
        - Distribution
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            properties:
              base_proposer_reward:
                type: string
              bonus_proposer_reward:
                type: string
              community_tax:
                type: string
        500:
          description: Internal Server Error
  /asset/tokens:
    post:
      tags:
        - Asset
      summary: Issue token
      description: Issue a new Token
      operationId: issueToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: tokenInfo
          description: the detail info about the Token to issue
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
              - $ref: "#/definitions/TokenBasicInfo"
      responses:
        200:
          description: Token issuance result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
    get:
      tags:
        - Asset
      summary: List tokens
      description: List all existing tokens
      operationId: getTokenList
      produces:
        - application/json
      responses:
        200:
          description: All existing tokens
          schema:
            type: array
            items:
              $ref: "#/definitions/Token"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}:
    get:
      tags:
        - Asset
      summary: queryToken
      description: Get token with provided `symbol`
      operationId: getToken
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
      responses:
        200:
          description: token with provided symbol
          schema:
            $ref: "#/definitions/Token"
        400:
          description: Invalid Request
        404:
          description: Tokens not found
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/ownerships:
    post:
      tags:
        - Asset
      summary: Transfer ownership
      description: Transfer token owner ship
      operationId: transferOwnership
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: newOwner
          description: transfer ownership to new owner
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              new_owner:
                $ref: "#/definitions/Address"
      responses:
        200:
          description: Token transfer ownership result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/mints:
    post:
      tags:
        - Asset
      summary: Mint token
      description: Mint mintable token
      operationId: mintToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: amount
          description: mint token amount
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              amount:
                type: string
      responses:
        200:
          description: Mint token result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/burns:
    post:
      tags:
        - Asset
      summary: Burn token
      description: Burn burnable token
      operationId: burnToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: amount
          description: burn token amount
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              amount:
                type: string
      responses:
        200:
          description: Burn token result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/forbids:
    post:
      tags:
        - Asset
      summary: Forbid token
      description: Forbid forbiddable token
      operationId: forbidToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: baseReq
          description: base req
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: Forbid token result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/unforbids:
    post:
      tags:
        - Asset
      summary: UnForbid token
      description: UnForbid forbiddable token
      operationId: unFrobidToken
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: baseReq
          description: base req
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
      responses:
        200:
          description: UnForbid token result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/forbidden/whitelist:
    get:
      tags:
        - Asset
      summary: queryWhitelist
      description: Get token whitelist with provided `symbol`
      operationId: getWhitelist
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
      responses:
        200:
          description: whitelist with provided symbol
          schema:
            type: array
            items:
              $ref: "#/definitions/Address"
        404:
          description: Token not found
        500:
          description: Internal Server Error
    post:
      tags:
        - Asset
      summary: Add forbid whitelist
      description: Add forbiddable token whitelist addr
      operationId: addWhitelist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: whitelist
          description: token whitelist addr
          required: true
          schema:
            $ref: "#/definitions/AddrList"
      responses:
        200:
          description: Add forbid whitelist result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/unforbidden/whitelist:
    post:
      tags:
        - Asset
      summary: Remove forbid whitelist
      description: Remove forbiddable token whitelist addr
      operationId: removeWhitelist
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: whitelist
          description: token whitelist addr
          required: true
          schema:
            $ref: "#/definitions/AddrList"
      responses:
        200:
          description: Remove forbid whitelist result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/forbidden/addresses:
    get:
      tags:
        - Asset
      summary: query forbidden addresses
      description: Get forbidden addresses with provided `symbol`
      operationId: getForbiddenAddresses
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
      responses:
        200:
          description: forbidden addresses with provided symbol
          schema:
            type: array
            items:
              $ref: "#/definitions/Address"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
    post:
      tags:
        - Asset
      summary: Forbid address
      description: Add forbidden addresses
      operationId: forbidAddr
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: addresses
          description: forbidden addresses
          required: true
          schema:
            $ref: "#/definitions/AddrList"
      responses:
        200:
          description: Forbid address result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/unforbidden/addresses:
    post:
      tags:
        - Asset
      summary: UnForbid address
      description: Remove forbidden addresses
      operationId: unForbidAddr
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: addresses
          description: un forbidden addresses
          required: true
          schema:
            $ref: "#/definitions/AddrList"
      responses:
        200:
          description: UnForbid address result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/reserved/symbols:
    get:
      tags:
        - Asset
      summary: List reserved symbols
      description: List all reserved symbols
      operationId: getReservedSymbols
      produces:
        - application/json
      responses:
        200:
          description: All reserved symbols
          schema:
            type: string
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /asset/tokens/{symbol}/infos:
    post:
      tags:
        - Asset
      summary: Modify token info
      description: Modify token info
      operationId: modifyTokenInfo
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: token symbol
          required: true
          type: string
          x-example: abc
        - in: body
          name: info
          description: new token info
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              url:
                type: string
                example: "[do-not-modify]"
              description:
                type: string
                example: "[do-not-modify]"
      responses:
        200:
          description: Modify token info result
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid Request
        500:
          description: Internal Server Error
  /market/gte-orders:
    post:
      summary: Create GTE order in blockchain
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: createGteOrder
      parameters:
        - in: body
          name: orderInfo
          description: create order tx
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  exist_blocks:
                    type: string
                    example: 10000
              - $ref: "#/definitions/Order"

      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /market/ioc-orders:
    post:
      summary: Create IOC order in blockchain
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: createIocOrder
      parameters:
        - in: body
          name: orderInfo
          description: create order tx
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
              - $ref: "#/definitions/Order"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /market/trading-pairs:
    post:
      summary: Create trading-pair in blockchain
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: createTradingPair
      parameters:
        - in: body
          name: info
          description: Create trading-pair
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
              - $ref: "#/definitions/BaseMarket"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /market/price-precision:
    post:
      summary: Modify the price precision of the trading pair in the dex
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: modifyPricePrecision
      parameters:
        - in: body
          name: info
          description: trading-pair, price-precision as params
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              price_precision:
                type: string
                example: 10
              trading_pair:
                type: string
                example: etc/cet
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /market/trading-pairs/{stock}/{money}:
    get:
      summary: Query trading-pair info
      tags:
        - Market
      produces:
        - application/json
      operationId: getTradingPair
      parameters:
        - in: path
          name: stock
          description: stock symbol
          required: true
          type: string
          x-example: btc
        - in: path
          name: money
          description: money symbol
          required: true
          type: string
          x-example: cet
      responses:
        200:
          description: trading-pair info of the specified symbol
          schema:
            $ref: "#/definitions/MarketInfo"
        400:
          description: Invalid symbol
        500:
          description: Server internal error
  /market/orders/{order-id}:
    get:
      summary: Query order info
      tags:
        - Market
      produces:
        - application/json
      operationId: getOrder
      parameters:
        - in: path
          name: order-id
          description: The order id
          required: true
          type: string
          x-example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
      responses:
        200:
          description: Order info of the specified id
          schema:
            $ref: "#/definitions/OrderInfo"
        400:
          description: Invalid order-id
        500:
          description: Server internal error
  /market/orders/account/{address}:
    get:
      summary: Query user order-id list
      tags:
        - Market
      produces:
        - application/json
      operationId: getOrders
      parameters:
        - in: path
          name: address
          description: The user address
          required: true
          type: string
          x-example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Order-Ids"
        400:
          description: Invalid address
        500:
          description: Server internal error
  /market/cancel-order:
    post:
      summary: Cancel the order
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: cancelOrder
      parameters:
        - in: body
          name: orderInfo
          description: cancel order tx
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              order_id:
                type: string
                example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj-1
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /market/cancel-trading-pair:
    post:
      summary: Cancel the trading-pair
      tags:
        - Market
      consumes:
        - application/json
      produces:
        - application/json
      operationId: cancelTradingPair
      parameters:
        - in: body
          name: info
          description: cancel trading-pair in dex
          required: true
          schema:
            type: object
            properties:
              base_req:
                $ref: "#/definitions/BaseReq"
              trading_pair:
                type: string
                example: abc/cet
              time:
                type: string
                example: 7
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /alias/address-of-alias/{alias}:
    get:
      summary: Given an alias, query the corresponding address
      operationId: getAddressFromAlias
      tags:
        - Alias
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: alias
          description: The alias to be queried
          required: true
          type: string
          x-example: superman
      responses:
        200:
          description: The corresponding address. Emtpy string means no corresponding address was found.
          schema:
            type: array
            items:
              type: string
              x-example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
        400:
          description: Invalid request
        500:
          description: Server internal error
  /alias/aliases-of-address/{address}:
    get:
      summary: Given an account's address, query all the corresponding aliases
      operationId: getAliasesFromAddress
      tags:
        - Alias
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: address
          description: The account's address to be queried
          required: true
          type: string
          x-example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
      responses:
        200:
          description: An array of corresponding aliases. If there is a default alias, it will be the first item in the array; If there is no default alias, empty string will be the first item; If there is not any alias at all, the array will contain only an empty string.
          schema:
            type: array
            items:
              type: string
              example: superman
        400:
          description: Invalid request
        500:
          description: Server internal error
  /alias/update:
    post:
      summary: Add or remove alias for an address
      tags:
        - Alias
      consumes:
        - application/json
      produces:
        - application/json
      operationId: updateAlias
      parameters:
        - in: body
          name: aliasUpdateReq
          description: update an address's aliases
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  alias:
                    type: string
                    example: superman
                  is_add:
                    type: boolean
                  as_default:
                    type: boolean
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /comment/new-thread:
    post:
      summary: Post a new comment to open a new thread
      tags:
        - Comment
      consumes:
        - application/json
      produces:
        - application/json
      operationId: newThread
      parameters:
        - in: body
          name: newThreadReq
          description: open a new thread
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  token:
                    type: string
                    example: cetdac
                  donation:
                    type: string
                    example: 100000000
                  title:
                    type: string
                    example: I love cetdac
                  content:
                    type: string
                    example: This is the content. The end.
                  content_type:
                    type: integer
                    example: 3
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /comment/followup-comment:
    post:
      summary: Post a follow-up comment under some thread
      tags:
        - Comment
      consumes:
        - application/json
      produces:
        - application/json
      operationId: followupComment
      parameters:
        - in: body
          name: followupCommentReq
          description: Post a follow-up comment
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  token:
                    type: string
                    example: cetdac
                  donation:
                    type: string
                    example: 100000000
                  title:
                    type: string
                    example: I love cetdac too
                  content:
                    type: string
                    example: This is the content. The end.
                  content_type:
                    type: integer
                    example: 3
                  id_rewarded:
                    type: string
                    example: 9883409
                  reward_target:
                    type: string
                    example: coinex1qwl879nx9t6kef4supyazayf7vjhennyjqwjgr
                  reward_token:
                    type: string
                    example: cet
                  reward_amount:
                    type: string
                    example: 200000000
                  attitudes:
                    type: array
                    items:
                      type: integer
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /comment/reward-comments:
    post:
      summary: reward some comments with coins
      tags:
        - Comment
      consumes:
        - application/json
      produces:
        - application/json
      operationId: rewardComments
      parameters:
        - in: body
          name: rewardCommentsReq
          description: reward some comments
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  token:
                    type: string
                    example: cetdac
                  references:
                    type: array
                    items:
                      $ref: "#/definitions/CommentRef"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /bancorlite/bancor-init:
    post:
      summary: create bancor
      tags:
        - Bancorlite
      consumes:
        - application/json
      produces:
        - application/json
      operationId: bancorInit
      parameters:
        - in: body
          name: bancorInit
          description: create bancor
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  stock:
                    type: string
                    example: btc
                  money:
                    type: string
                    example: cet
                  init_price:
                    type: string
                    example: "10"
                  max_supply:
                    type: string
                    example: "100000"
                  max_price:
                    type: string
                    example: "100"
                  enable_cancel_time:
                    type: string
                    example: "1564479501"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /bancorlite/bancor-trade:
    post:
      summary: trade with bancor
      tags:
        - Bancorlite
      consumes:
        - application/json
      produces:
        - application/json
      operationId: bancorTrade
      parameters:
        - in: body
          name: bancorTrade
          description: trade with bancor
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  stock:
                    type: string
                    example: btc
                  money:
                    type: string
                    example: cet
                  amount:
                    type: string
                    example: "100"
                  is_buy:
                    type: boolean
                    example: true
                  money_limit:
                    type: string
                    example: "1000"
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /bancorlite/bancor-cancel:
    post:
      summary: cancel bancor
      tags:
        - Bancorlite
      consumes:
        - application/json
      produces:
        - application/json
      operationId: bancorCancel
      parameters:
        - in: body
          name: bancorCancel
          description: cancel bancor
          required: true
          schema:
            type: object
            allOf:
              - properties:
                  base_req:
                    $ref: "#/definitions/BaseReq"
                  stock:
                    type: string
                    example: btc
                  money:
                    type: string
                    example: cet
      responses:
        200:
          description: Tx was succesfully generated
          schema:
            $ref: "#/definitions/StdTx"
        400:
          description: Invalid request
        500:
          description: Server internal error
  /bancorlite/pools/{symbol}:
    get:
      summary: get the bancor pool info
      operationId: getBancorInfo
      tags:
        - Bancorlite
      produces:
        - application/json
      parameters:
        - in: path
          name: symbol
          description: stock and money pair
          required: true
          type: string
          x-example: btc-cet
      responses:
        200:
          description: bancor pool info
          schema:
            type: object
            properties:
              stock:
                type: string
              money:
                type: string
              init_price:
                type: string
              max_supply:
                type: string
              max_price:
                type: string
              current_Price:
                type: string
              stock_in_pool:
                type: string
              money_in_pool:
                type: string
              enable_cancel_time:
                type: string
        404:
          description: There is no corresponding bancor info
        500:
          description: Server internal error
definitions:
  BaseMarket:
    type: object
    properties:
      stock:
        type: string
        example: abc
      money:
        type: string
        example: cet
      price_precision:
        type: string
        example: 10
  MarketInfo:
    type: object
    allOf:
      - $ref: "#/definitions/BaseMarket"
      - properties:
          last_executed_price:
            type: string
            example: "0.00002"
          creator:
            type: string
            example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
  Order:
    type: object
    properties:
      order_type:
        type: string
        example: 1
      trading_pair:
        type: string
        example: "abc/cet"
      price_precision:
        type: string
        example: 9
      price:
        type: string
        example: 1000
      quantity:
        type: string
        example: 12320
      side:
        type: string
        example: 1
  OrderInfo:
    type: object
    allOf:
      - $ref: "#/definitions/Order"
      - properties:
          sender:
            type: string
            example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj
          sequence:
            type: integer
            example: 8
          time_in_force:
            type: integer
            example: 1
          height:
            type: integer
            example: 10
          frozen_fee:
            type: integer
            example: 100
          left_stock:
            type: integer
            example: 100
          freeze:
            type: integer
            example: 100
          DealStock:
            type: integer
            example: 100
          DealMoney:
            type: integer
            example: 100
  Order-Ids:
    type: array
    items:
      type: string
      example: coinex1dmz7e2fddhejdz5n7e3qc5szx3zn2gj3ta8rwj-1
  CheckTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/KVPair"
    example:
      code: 0
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ""
        - ""
  DeliverTxResult:
    type: object
    properties:
      code:
        type: integer
      data:
        type: string
      gas_used:
        type: integer
      gas_wanted:
        type: integer
      info:
        type: string
      log:
        type: string
      tags:
        type: array
        items:
          $ref: "#/definitions/KVPair"
    example:
      code: 5
      data: data
      log: log
      gas_used: 5000
      gas_wanted: 10000
      info: info
      tags:
        - ""
        - ""
  BroadcastTxCommitResult:
    type: object
    properties:
      check_tx:
        $ref: "#/definitions/CheckTxResult"
      deliver_tx:
        $ref: "#/definitions/DeliverTxResult"
      hash:
        $ref: "#/definitions/Hash"
      height:
        type: integer
  KVPair:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  Msg:
    type: string
  Address:
    type: string
    description: bech32 encoded address
    example: coinex1depk54cuajgkzea6zpgkq36tnjwdzv4afc3d27
  ValidatorAddress:
    type: string
    description: bech32 encoded address
    example: coinexvaloper1depk54cuajgkzea6zpgkq36tnjwdzv4avv9cxd
  Coin:
    type: object
    properties:
      denom:
        type: string
        example: stake
      amount:
        type: string
        example: "50"
  LockedCoin:
    type: object
    properties:
      coin:
        $ref: "#/definitions/Coin"
      unlock_time:
        type: string
        example: "1559549834"
  Hash:
    type: string
    example: EE5F3404034C524501629B56E0DDC38FAD651F04
  TxQuery:
    type: object
    properties:
      hash:
        type: string
      height:
        type: number
      tx:
        $ref: "#/definitions/StdTx"
      result:
        type: object
        properties:
          logs:
            type: string
          gas_wanted:
            type: string
            example: "0"
          gas_used:
            type: string
            example: "0"
          tags:
            type: array
            items:
              $ref: "#/definitions/KVPair"
  PaginatedQueryTxs:
    type: object
    properties:
      total_count:
        type: number
        example: 1
      count:
        type: number
        example: 1
      page_number:
        type: number
        example: 1
      page_total:
        type: number
        example: 1
      limit:
        type: number
        example: 30
      txs:
        type: array
        items:
          $ref: "#/definitions/TxQuery"
  StdTx:
    type: object
    properties:
      msg:
        type: array
        items:
          $ref: "#/definitions/Msg"
      fee:
        type: object
        properties:
          gas:
            type: string
          amount:
            type: array
            items:
              $ref: "#/definitions/Coin"
      memo:
        type: string
      signature:
        type: object
        properties:
          signature:
            type: string
            example: MEUCIQD02fsDPra8MtbRsyB1w7bqTM55Wu138zQbFcWx4+CFyAIge5WNPfKIuvzBZ69MyqHsqD8S1IwiEp+iUb6VSdtlpgY=
          pub_key:
            type: object
            properties:
              type:
                type: string
                example: "tendermint/PubKeySecp256k1"
              value:
                type: string
                example: "Avz04VhtKJh8ACCVzlI8aTosGy0ikFXKIVHQ3jKMrosH"
          account_number:
            type: string
            example: "0"
          sequence:
            type: string
            example: "0"
  KeyOutput:
    type: object
    properties:
      name:
        type: string
        example: Main Account
      address:
        type: string
        example: coinex1y5kdxnzn2tfwayyntf2n28q8q2s80mcul852ke
      pub_key:
        type: string
        example: "coinexpub1addwnpepqdnj3shrcsjxjfp027lh6szyrrmvwxace6frplg30e9ngtflzpr5ut4wmke"
      type:
        type: string
        example: local
      seed:
        type: string
  BlockID:
    type: object
    properties:
      hash:
        $ref: "#/definitions/Hash"
      parts:
        type: object
        properties:
          total:
            type: number
            example: 0
          hash:
            $ref: "#/definitions/Hash"
  BlockHeader:
    type: object
    properties:
      chain_id:
        type: string
        example: coinexchain-2
      height:
        type: number
        example: 1
      time:
        type: string
        example: "2017-12-30T05:53:09.287+01:00"
      num_txs:
        type: number
        example: 0
      last_block_id:
        $ref: "#/definitions/BlockID"
      total_txs:
        type: number
        example: 35
      last_commit_hash:
        $ref: "#/definitions/Hash"
      data_hash:
        $ref: "#/definitions/Hash"
      validators_hash:
        $ref: "#/definitions/Hash"
      next_validators_hash:
        $ref: "#/definitions/Hash"
      consensus_hash:
        $ref: "#/definitions/Hash"
      app_hash:
        $ref: "#/definitions/Hash"
      last_results_hash:
        $ref: "#/definitions/Hash"
      evidence_hash:
        $ref: "#/definitions/Hash"
      proposer_address:
        $ref: "#/definitions/Address"
      version:
        type: object
        properties:
          block:
            type: string
            example: 10
          app:
            type: string
            example: 0
  Block:
    type: object
    properties:
      header:
        $ref: "#/definitions/BlockHeader"
      txs:
        type: array
        items:
          type: string
      evidence:
        type: object
        properties:
          evidence:
            type: array
            items:
              type: string
      last_commit:
        type: object
        properties:
          block_id:
            $ref: "#/definitions/BlockID"
          precommits:
            type: array
            items:
              type: object
              properties:
                validator_address:
                  type: string
                validator_index:
                  type: string
                  example: "0"
                height:
                  type: string
                  example: "0"
                round:
                  type: string
                  example: "0"
                timestamp:
                  type: string
                  example: "2017-12-30T05:53:09.287+01:00"
                type:
                  type: number
                  example: 2
                block_id:
                  $ref: "#/definitions/BlockID"
                signature:
                  type: string
                  example: "7uTC74QlknqYWEwg7Vn6M8Om7FuZ0EO4bjvuj6rwH1mTUJrRuMMZvAAqT9VjNgP0RA/TDp6u/92AqrZfXJSpBQ=="
  BlockQuery:
    type: object
    properties:
      block_meta:
        type: object
        properties:
          header:
            $ref: "#/definitions/BlockHeader"
          block_id:
            $ref: "#/definitions/BlockID"
      block:
        $ref: "#/definitions/Block"
  DelegationDelegatorReward:
    type: object
    properties:
      validator_address:
        $ref: "#/definitions/ValidatorAddress"
      reward:
        type: array
        items:
          $ref: "#/definitions/Coin"
  DelegatorTotalRewards:
    type: object
    properties:
      rewards:
        type: array
        items:
          $ref: "#/definitions/DelegationDelegatorReward"
      total:
        type: array
        items:
          $ref: "#/definitions/Coin"
  BaseReq:
    type: object
    properties:
      from:
        type: string
        example: "coinex1y5kdxnzn2tfwayyntf2n28q8q2s80mcul852ke"
        description: Sender address or Keybase name to generate a transaction
      memo:
        type: string
        example: "Sent with example memo"
      chain_id:
        type: string
        example: "coinex-chain-1"
      account_number:
        type: string
        example: "0"
      sequence:
        type: string
        example: "1"
      gas:
        type: string
        example: "200000"
      gas_adjustment:
        type: string
        example: "1.2"
      fees:
        type: array
        items:
          $ref: "#/definitions/Coin"
      simulate:
        type: boolean
        example: false
        description: Estimate gas for a transaction (cannot be used in conjunction with generate_only)
  TendermintValidator:
    type: object
    properties:
      address:
        $ref: "#/definitions/ValidatorAddress"
      pub_key:
        type: string
        example: coinexvalconspub1zcjduepq7sjfglw7ra4mjxpw4ph7dtdhdheh7nz8dfgl6t8u2n5szuuql9mqsrwquu
      voting_power:
        type: string
        example: "1000"
      proposer_priority:
        type: string
        example: "1000"
  TextProposal:
    type: object
    properties:
      proposal_id:
        type: string
      title:
        type: string
      description:
        type: string
      proposal_type:
        type: string
      proposal_status:
        type: string
      final_tally_result:
        $ref: "#/definitions/TallyResult"
      submit_time:
        type: string
      total_deposit:
        type: array
        items:
          $ref: "#/definitions/Coin"
      voting_start_time:
        type: string
  Proposer:
    type: object
    properties:
      proposal_id:
        type: string
      proposer:
        type: string
  Deposit:
    type: object
    properties:
      amount:
        type: array
        items:
          $ref: "#/definitions/Coin"
      proposal_id:
        type: string
      depositor:
        $ref: "#/definitions/Address"
  TallyResult:
    type: object
    properties:
      'yes':
        type: string
        example: "0.0000000000"
      abstain:
        type: string
        example: "0.0000000000"
      'no':
        type: string
        example: "0.0000000000"
      no_with_veto:
        type: string
        example: "0.0000000000"
  Vote:
    type: object
    properties:
      voter:
        type: string
      proposal_id:
        type: string
      option:
        type: string
  Validator:
    type: object
    properties:
      operator_address:
        $ref: "#/definitions/ValidatorAddress"
      consensus_pubkey:
        type: string
        example: coinexvalconspub1zcjduepq7sjfglw7ra4mjxpw4ph7dtdhdheh7nz8dfgl6t8u2n5szuuql9mqsrwquu
      jailed:
        type: boolean
      status:
        type: integer
      tokens:
        type: string
      delegator_shares:
        type: string
      description:
        type: object
        properties:
          moniker:
            type: string
          identity:
            type: string
          website:
            type: string
          details:
            type: string
      unbonding_height:
        type: string
        example: "0"
      unbonding_time:
        type: string
        example: "1970-01-01T00:00:00Z"
      commission:
        type: object
        properties:
          CommissionRates:
            type: object
            properties:
              rate:
                type: string
                example: "0"
              max_rate:
                type: string
                example: "0"
              max_change_rate:
                type: string
                example: "0"
          update_time:
            type: string
            example: "1970-01-01T00:00:00Z"
      min_self_delegation:
        type: string
  Delegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      shares:
        type: string
      height:
        type: integer
  UnbondingDelegationPair:
    type: object
    properties:
      delegator_address:
        type: string
      validator_address:
        type: string
      entries:
        type: array
        items:
          $ref: "#/definitions/UnbondingEntries"
  UnbondingEntries:
    type: object
    properties:
      initial_balance:
        type: string
      balance:
        type: string
      creation_height:
        type: string
      completion_time:
        type: string
  Redelegation:
    type: object
    properties:
      delegator_address:
        type: string
      validator_src_address:
        type: string
      validator_dst_address:
        type: string
      entries:
        type: array
        items:
          $ref: "#/definitions/RedelegationEntry"
  RedelegationEntry:
    type: object
    properties:
      creation_height:
        type: integer
      completion_time:
        type: string
      initial_balance:
        type: string
      balance:
        type: string
      shares_dst:
        type: string
  ValidatorDistInfo:
    type: object
    properties:
      operator_address:
        $ref: "#/definitions/ValidatorAddress"
      self_bond_rewards:
        type: array
        items:
          $ref: "#/definitions/Coin"
      val_commission:
        type: array
        items:
          $ref: "#/definitions/Coin"
  PublicKey:
    type: object
    properties:
      type:
        type: string
      value:
        type: string
  SigningInfo:
    type: object
    properties:
      start_height:
        type: string
      index_offset:
        type: string
      jailed_until:
        type: string
      missed_blocks_counter:
        type: string
  ParamChange:
    type: object
    properties:
      subspace:
        type: string
        example: "staking"
      key:
        type: string
        example: "MaxValidators"
      subkey:
        type: string
        example: ""
      value: {}
  Supply:
    type: object
    properties:
      total:
        type: array
        items:
          $ref: "#/definitions/Coin"
  TokenBasicInfo:
    type: object
    properties:
      name:
        type: string
        example: "ABC Token"
      symbol:
        type: string
        example: "abc"
      total_supply:
        type: string
        example: "2000000000000000"
      owner:
        $ref: "#/definitions/Address"
      mintable:
        type: boolean
        example: false
      burnable:
        type: boolean
        example: true
      addr_forbiddable:
        type: boolean
        example: false
      token_forbiddable:
        type: boolean
        example: false
      url:
        type: string
        example: "www.abc.org"
      description:
        type: string
        example: "token abc is a example token"
      identity:
        type: string
  Token:
    type: object
    allOf:
      - $ref: "#/definitions/TokenBasicInfo"
      - properties:
          total_burn:
            type: string
            example: "100000000000000"
          total_mint:
            type: string
            example: "0"
          is_forbidden:
            type: boolean
            example: false
  AddrList:
    type: object
    properties:
      base_req:
        $ref: "#/definitions/BaseReq"
      addr_list:
        type: array
        items:
          $ref: "#/definitions/Address"
  CommentRef:
    type: object
    properties:
      id:
        type: string
        example: 9883409
      reward_target:
        type: string
        example: coinex1qwl879nx9t6kef4supyazayf7vjhennyjqwjgr
      reward_token:
        type: string
        example: cet
      reward_amount:
        type: string
        example: 200000000
      attitudes:
        type: array
        items:
          type: integer
